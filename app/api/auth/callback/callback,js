// pages/api/auth/callback.ts
import axios from "axios";

export default async function handler(req, res) {
  const { code, provider } = req.query;

  if (!code || !provider) {
    return res.status(400).json({ error: "Missing code or provider" });
  }

  try {
    if (provider === "yandex") {
      const tokenRes = await axios.post(
        "https://oauth.yandex.com/token",
        null,
        {
          params: {
            grant_type: "authorization_code",
            code,
            client_id: process.env.YANDEX_CLIENT_ID,
            client_secret: process.env.YANDEX_CLIENT_SECRET,
          },
        }
      );

      const access_token = tokenRes.data.access_token;

      const userRes = await axios.get("https://login.yandex.ru/info", {
        headers: { Authorization: `OAuth ${access_token}` },
      });

      const user = userRes.data;

      // TODO: create/find user, start session
      return res.status(200).json({ provider: "yandex", user });
    } else if (provider === "vk") {
      const tokenRes = await axios.get("https://oauth.vk.com/access_token", {
        params: {
          client_id: process.env.VK_CLIENT_ID,
          client_secret: process.env.VK_CLIENT_SECRET,
          redirect_uri: process.env.VK_REDIRECT_URI,
          code,
        },
      });

      const { access_token, user_id, email } = tokenRes.data;

      const userRes = await axios.get("https://api.vk.com/method/users.get", {
        params: {
          access_token,
          v: "5.131",
          user_ids: user_id,
          fields: "photo_100",
        },
      });

      const userInfo = userRes.data.response[0];

      return res.status(200).json({
        provider: "vk",
        user: {
          id: userInfo.id,
          name: `${userInfo.first_name} ${userInfo.last_name}`,
          email,
          avatar: userInfo.photo_100,
        },
      });
    } else {
      return res.status(400).json({ error: "Unsupported provider" });
    }
  } catch (err) {
    console.error(err.response?.data || err.message);
    return res
      .status(500)
      .json({ error: "OAuth callback failed", details: err.message });
  }
}
